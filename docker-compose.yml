# Docker docker-compose.yml
# and dynmaic yaml from traefik /home/angel/repos/helix-lite-alpha/traefik/dynamic/dynamic.yml

services:
  # üß≠ Traefik - Edge Router & Reverse Proxy
  traefik:
    image: traefik:v3.5.2
    container_name: traefik
    profiles:
      - core
    command:
      - "--api.dashboard=true"
      - "--providers.docker=false"           # üö´ disable docker provider
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - ./traefik/certs:/etc/traefik/certs:ro
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
    networks:
      - helix_net
  # Your new app with correct indentation
  helix-app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: helix-app
    restart: unless-stopped
    networks:
      - helix_net
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    user: "1000:1000"   # üëà force container to match host 
    profiles:
      - core
    expose:
      - "5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=${N8N_DB_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASS}
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME}
    networks:
      - helix_net

  redis:
    image: redis:7
    container_name: redis
    profiles:
      - core
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ./data/redis:/data
    networks:
      - helix_net
    expose:
      - "6379"
    ports:
      - "6379:6379"   # local debug access
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis-ui:
    image: redislabs/redisinsight:latest
    container_name: redis-ui
    profiles:
      - core
    expose:
      - "5540"   # only for Traefik, not published to host
    networks:
      - helix_net
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    profiles:
      - core
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    networks:
      - helix_net
    expose:
      - "5672"   # AMQP
      - "15672"  # Management UI
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  # üóÑÔ∏è Postgres Database
  postgres:
    image: postgres:latest
    container_name: postgres
    profiles:
      - core    
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - helix_net

  # üìä Grafana - Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    user: "0:0"
    profiles:
      - core
    expose:
      - "3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
    networks:
      - helix_net

  # üìà Prometheus - Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    user: "0:0"
    profiles:
      - core
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/config:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - helix_net
    healthcheck:
      test: ["CMD-SHELL", "ps -o comm= 1 | grep prometheus || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    volumes:
      - ./data/ollama:/root/.ollama   # persist models & configs
    ports:
      - "11434:11434"   # Ollama API
    networks:
      - helix_net
  # üìß MailHog - Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    profiles:
      - core
    expose:
      - "8025"
    networks:
      - helix_net
  # üêò PgAdmin - Postgres UI
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    profiles:
      - core
    expose:
      - "80" # üëà Corrected port
    ports:
      - "5050:80" # üëà Corrected mapping to container's port 80
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - helix_net
  # üë• Keycloak - Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: ["start-dev", "--http-port=8080", "--hostname-strict=false"]
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD}
      - KEYCLOAK_DB_USER=${KEYCLOAK_DB_USER}
      - KEYCLOAK_DB_PASS=${KEYCLOAK_DB_PASS}
      - KEYCLOAK_DB_NAME=${KEYCLOAK_DB_NAME}
      - KC_PROXY=edge
      - KC_HOSTNAME=${KC_HOSTNAME}
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_ENABLED=true
      - KC_HTTP_PORT=8080
    ports:
      - "8080:8080" # This port can eventually be removed once we are sure it works
    profiles:
      - core
    networks:
      - helix_net
  # üîê Vault - Secret Management
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    profiles:
      - core
    expose:
      - "8200"
    networks:
      - helix_net
    healthcheck:
      test: ["CMD-SHELL", "ps -o comm= 1 | grep vault || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
  # üóÇÔ∏è MinIO - Object Storage
  minio:
    image: minio/minio:latest
    container_name: minio
    profiles:
      - core
    command: server /data --console-address ":9001"
    ports:
      - "9000" # API
      - "9001" # Console
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./data/minio:/data
    networks:
      - helix_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
# üåê OpenWebUI
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui
    profiles:
      - core
    expose:
      - "3001"
    ports:
      - "3001:8080"
    environment:
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
      - CORS_ALLOW_ORIGIN=https://openwebui.helix.local,http://localhost:3001
    networks:
      - helix_net

   # üìÇ FileBrowser
  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: filebrowser
    profiles:
      - core
    expose:
      - "80" # üëà Corrected port
    ports:
      - "8082:80" # üëà Corrected mapping to container's port 80
    volumes:
      - ./data/files:/srv
    networks:
      - helix_net
    healthcheck:
      test: ["CMD-SHELL", "ps -o comm= 1 | grep filebrowser || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
  # üìö Moodle (LMS)
  moodle:
    image: bitnami/moodle:latest
    container_name: moodle
    profiles:
      - lms
    ports:
      - "80"
    networks:
      - helix_net

  # üóÑÔ∏è Adminer
  adminer:
    image: adminer:latest
    container_name: adminer
    profiles:
      - core
    expose:
      - "8080" # üëà This was already correct
    ports:
      - "8083:8080" # üëà This was already correct
    networks:
      - helix_net
  # üõí Medusa (E-commerce)
  medusa:
    image: medusajs/medusa:latest
    container_name: medusa
    profiles:
      - lms
    ports:
      - "8081"
    networks:
      - helix_net

  # ‚öì Portainer - Container Management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    profiles:
      - core
    expose:
      - "9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/portainer:/data
    networks:
      - helix_net

volumes:
  keycloak_data:
  postgres_data:
  vault_data:
  prometheus_data: 
  traefik_data:
  n8n_data:

networks:
  helix_net:
    driver: bridge
